find_path(proj_INCLUDE_DIR NAMES proj_api.h proj.h)
#message(STATUS "proj_INCLUDE_DIR: ${proj_INCLUDE_DIR}")

if(proj_INCLUDE_DIR)
   if(EXISTS "${proj_INCLUDE_DIR}/proj.h")
	file(STRINGS "${proj_INCLUDE_DIR}/proj.h" proj_Parsed_Version_Major REGEX "^#define PROJ_VERSION_MAJOR +[0-9]+.*$")
	file(STRINGS "${proj_INCLUDE_DIR}/proj.h" proj_Parsed_Version_Minor REGEX "^#define PROJ_VERSION_MINOR +[0-9]+.*$")
	file(STRINGS "${proj_INCLUDE_DIR}/proj.h" proj_Parsed_Version_Patch REGEX "^#define PROJ_VERSION_PATCH +[0-9]+.*$")
	#Message(STATUS "PROJ_VERSION_MAJOR: ${proj_Parsed_Version_Major}")
	string(SUBSTRING ${proj_Parsed_Version_Major} 27 -1 proj_Parsed_Version_Major)
	string(SUBSTRING ${proj_Parsed_Version_Minor} 27 -1 proj_Parsed_Version_Minor)
	string(SUBSTRING ${proj_Parsed_Version_Patch} 27 -1 proj_Parsed_Version_Patch)
        math(EXPR proj_MAJOR_VERSION "${proj_Parsed_Version_Major}")
        math(EXPR proj_MINOR_VERSION "${proj_Parsed_Version_Minor}")
        math(EXPR proj_PATCH_VERSION "${proj_Parsed_Version_Patch}")
        set(proj_VERSION_STRING "${proj_MAJOR_VERSION}.${proj_MINOR_VERSION}.${proj_PATCH_VERSION}")
     elseif(EXISTS "${proj_INCLUDE_DIR}/proj_api.h")
        file(STRINGS "${proj_INCLUDE_DIR}/proj_api.h" proj_Parsed_Version REGEX "^#define PJ_VERSION +[0-9]+.*$")
        string(SUBSTRING ${proj_Parsed_Version} 19 -1 proj_Parsed_Version)
        math(EXPR proj_MAJOR_VERSION "${proj_Parsed_Version} / 100")
        math(EXPR proj_MINOR_VERSION "${proj_Parsed_Version} % 100 / 10")
        math(EXPR proj_PATCH_VERSION "${proj_Parsed_Version} % 100 % 10")
        set(proj_VERSION_STRING "${proj_MAJOR_VERSION}.${proj_MINOR_VERSION}.${proj_PATCH_VERSION}")
     endif()
     #Message(STATUS "PROJ_VERSION_MAJOR: ${proj_Parsed_Version_Major}")
     #Message(STATUS "PROJ_VERSION_MINOR: ${proj_Parsed_Version_Minor}")
     #Message(STATUS "PROJ_VERSION_PATCH: ${proj_Parsed_Version_Patch}")
     #Message(STATUS "PROJ_VERSION_STRING: ${proj_VERSION_STRING}")
endif()
find_library(proj_LIBRARY_RELEASE NAMES proj)
find_library(proj_LIBRARY_DEBUG NAMES projd)

include(SelectLibraryConfigurations)
select_library_configurations(proj) #sets proj_LIBRARY using proj_LIBRARY_DEBUG and proj_LIBRARY_RELEASE

mark_as_advanced(proj_INCLUDE_DIR)
set(proj_INCLUDE_DIRS ${proj_INCLUDE_DIR})

set(proj_LIBRARIES ${proj_LIBRARY})

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(proj REQUIRED_VARS proj_INCLUDE_DIR proj_LIBRARY VERSION_VAR proj_VERSION_STRING)
