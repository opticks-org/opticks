find_path(swscale_INCLUDE_DIR swscale.h PATH_SUFFIXES ffmpeg libswscale ffmpeg/libswscale)
if(swscale_INCLUDE_DIR AND EXISTS "${swscale_INCLUDE_DIR}/swscale.h")
   file(STRINGS "${swscale_INCLUDE_DIR}/swscale.h" swscale_Parsed_Version REGEX "^#define LIBSWSCALE_VERSION_MAJOR +.+$")
   string(REGEX REPLACE "^.*LIBSWSCALE_VERSION_MAJOR +" "" swscale_VERSION_MAJOR "${swscale_Parsed_Version}")
   file(STRINGS "${swscale_INCLUDE_DIR}/swscale.h" swscale_Parsed_Version REGEX "^#define LIBSWSCALE_VERSION_MINOR +.+$")
   string(REGEX REPLACE "^.*LIBSWSCALE_VERSION_MINOR +" "" swscale_VERSION_MINOR "${swscale_Parsed_Version}")
   file(STRINGS "${swscale_INCLUDE_DIR}/swscale.h" swscale_Parsed_Version REGEX "^#define LIBSWSCALE_VERSION_MICRO +.+$")
   string(REGEX REPLACE "^.*LIBSWSCALE_VERSION_MICRO +" "" swscale_VERSION_PATCH "${swscale_Parsed_Version}")
   if(NOT swscale_VERSION_MAJOR AND NOT swscale_VERSION_MINOR AND NOT swscale_VERSION_PATCH)
      file(STRINGS "${swscale_INCLUDE_DIR}/swscale.h" swscale_Parsed_Version REGEX "^#define LIBSWSCALE_VERSION +.+$")
      if(swscale_Parsed_Version)
         string(REGEX REPLACE "^.*LIBSWSCALE_VERSION +([0-9]+).*$" "\\1" swscale_VERSION_MAJOR "${swscale_Parsed_Version}")
         string(REGEX REPLACE "^.*LIBSWSCALE_VERSION +[0-9]+\\.([0-9]+).*$" "\\1" swscale_VERSION_MINOR "${swscale_Parsed_Version}")
         string(REGEX REPLACE "^.*LIBSWSCALE_VERSION +[0-9]+\\.[0-9]+\\.([0-9]+).*$" "\\1" swscale_VERSION_PATCH "${swscale_Parsed_Version}")
         find_library(swscale_LIBRARY_RELEASE NAMES swscale)
         find_library(swscale_LIBRARY_DEBUG NAMES swscaled)
      else()
         # default for Opticks' avcodec 51.13.0, whose swscale.h does not contain version info and whose symbols live in libavcodec
         set(swscale_VERSION_MAJOR 0)
         set(swscale_VERSION_MINOR 0)
         set(swscale_VERSION_PATCH 1)
         find_library(swscale_LIBRARY_RELEASE NAMES avcodec)
         find_library(swscale_LIBRARY_DEBUG NAMES avcodecd)
      endif()
   else()
      find_library(swscale_LIBRARY_RELEASE NAMES swscale)
      find_library(swscale_LIBRARY_DEBUG NAMES swscaled)
   endif()
   set(swscale_VERSION_STRING "${swscale_VERSION_MAJOR}.${swscale_VERSION_MINOR}.${swscale_VERSION_PATCH}")
   set(swscale_MAJOR_VERSION "${swscale_VERSION_MAJOR}")
   set(swscale_MINOR_VERSION "${swscale_VERSION_MINOR}")
   set(swscale_PATCH_VERSION "${swscale_VERSION_PATCH}")
endif()


include(SelectLibraryConfigurations)
select_library_configurations(swscale)

set(swscale_DEFINITIONS -DOFFSET_T_DEFINED)
if(WIN32)
    list(APPEND swscale_DEFINITIONS -DEMULATE_INTTYPES -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_ISOC9X_SOURCE -DMSVC8 -DBUILD_SHARED_AV) 
endif()
set(swscale_DEFINITIONS "${swscale_DEFINITIONS}" CACHE STRING "swscale definitions")

set(swscale_INCLUDE_DIRS ${swscale_INCLUDE_DIR})
mark_as_advanced(swscale_INCLUDE_DIR)
mark_as_advanced(swscale_DEFINITIONS)

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(swscale REQUIRED_VARS swscale_INCLUDE_DIR swscale_LIBRARY VERSION_VAR swscale_VERSION_STRING)
set(swscale_FOUND ${SWSCALE_FOUND})
